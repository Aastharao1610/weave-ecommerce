// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELVIERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String?                  @unique
  phone                  String?                  @unique
  name                   String?
  password               String?
  authProvider           String?
  role                   Role                     @default(User)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  verified               Boolean                  @default(false)
  orders                 Order[]
  cart                   Cart?
  wishlist               Wishlist?
  reviews                Review[]
  payments               Payment[]
  RefreshToken           RefreshToken[]
  EmailVerificationToken EmailVerificationToken[]
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  imageUrl    String?

  // parentId Int
  // parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  // children Category[] @relation("CategoryHierarchy")

  Subcategory Subcategory[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  imageUrl   String?
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  products   Product[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String?
  description   String?
  basePrice     Float
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  variant       ProductVariant[]
  reviews       Review[]
  images        ProductImage[]
  Subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?
}

model ProductVariant {
  id            Int            @id @default(autoincrement())
  product       Product        @relation(fields: [productId], references: [id])
  productId     Int
  color         String
  size          String
  sku           String
  stock         Int            @default(0)
  price         Float? // override price if needed
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id               Int            @id @default(autoincrement())
  cart             Cart           @relation(fields: [cartId], references: [id])
  cartId           Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  quantity Int      @default(1)
  addedAt  DateTime @default(now())
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int            @unique
  items     WishlistItem[]
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id               Int            @id @default(autoincrement())
  wishlist         Wishlist       @relation(fields: [wishlistId], references: [id])
  wishlistId       Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int            @default(1)
  addedAt          DateTime       @default(now())
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  total Float

  shippingName       String
  shippingPhone      String
  shippingStreet     String
  shippingCity       String
  shippingState      String
  shippingPostalCode String
  shippingCountry    String

  billingStreet     String
  billingCity       String
  billingState      String
  billingPostalCode String
  billingCountry    String

  items   OrderItem[]
  payment Payment?
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  priceAtPurchase  Float
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  paymentMethod String
  amount        Float
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User?         @relation(fields: [userId], references: [id])
  userId        Int?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  ip        String?
  userAgent String?
}
